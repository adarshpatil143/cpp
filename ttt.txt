class Customer
{
private:
    std::string _id;
    std::string _name;
    int _age; which ia an int value between 18 to 99 (both inclusive)
    //_credit_card which is a reference_wrapper to a shared_pointer to an instance of credit card



class CreditCard
{
private:
    float _number; //which is a 6 digit number
    _type which is PREMIUM , SAVINGS or ELITE
    _max_limit is an inter greater than 10000



functions
/*
1. A higher order function that accepts 
    a) A data container of Customer instances
    b) A function wrapper that can wrap a function of the signature 
        i)input ->a data container
        ii)output -> void
    /////////////////////////

  2. AN overload of the above higher order function that accepts

      a) A data container of customer instances
       b)A function wrapper that can wrap a function of the signature
             i)input -> A data container & a float value
             ii) output ->void
       c) a float paramater
 */



 
 3. A function to create 4 instances of Customer type in a container that
    allows the following

      a) storage of elements in non- consecutive memory locations
      b)ability to add or remove elements with no limit on size(no fixed size for the container)

 */



4. A function that counts and prints the number of customer instances who have a 
   _credit_card with max_limit above a threshold value provided by the user as the 
   second parameter
 */


/*
     5. A function to find and print the type of every _credit_card for ONLY THOSE CreditCard
     instances that are associated with Customer instances whose age is above a threshold value
     provided by the user as the second parameter.


*/



 /*
 6. A function to print "TRUE" or " FALSE"  to indicate whether all customers instances have 
 the _credit_card of type ELITE
 */


 in the main.cpp write the code for the following


 A. create a container functions_set_A of function wrappers which contain functions
    3,6 and 7 described above

 /*
 B. create a partial function by binding second parameter of function in point to the value 4.5
 */


 /*
 C. Create a partial function by bindin the second parameter of function in point 6 to the value
     6.1
 */